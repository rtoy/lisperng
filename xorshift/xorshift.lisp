;;;; xorshift1024*
;;;; See https://en.wikipedia.org/wiki/Xorshift.

(defstruct xorshift1024*-state
  (index 0 :type (integer 0 32))
  (state (make-array 32 :element-type '(unsigned-byte 32))
         :type (simple-array (unsigned-byte 32) (32))))

(defun initialize-xorshift1024*-state (seed state)
  (let ((s (xorshift1024*-state-state state)))
    (setf (xorshift1024*-state-index state) 0)
    (init-xor-shift-64 seed)
    (dotimes (k 16)
      (let ((x (xor-shift-64)))
	(setf (aref s (* 2 k)) (ldb (byte 32 0) x))
	(setf (aref s (1+ (* 2 k))) (ldb (byte 32 32) x))))
    state))

;; This is an implementation of the xorshift1024* RNG, using 32-bit
;; operations as much as possible.
(defun xorshift1024*-32 (state)
  (declare (type xorshift1024*-state state))
  (let ((p (xorshift1024*-state-index state))
	(s (xorshift1024*-state-state state)))
    (declare (type (integer 0 31) p)
	     (type (simple-array (unsigned-byte 32) (32)) s)
	     (optimize (speed 3)))
    (let ((s0-0 (aref s p))
	  (s0-1 (aref s (+ p 1))))
      (declare (type (unsigned-byte 32) s0-0 s0-1))
      (setf p (logand (+ p 2) 31))
      (setf (xorshift1024*-state-index state) p)
      (let* ((s1-0 (aref s p))
	     (s1-1 (aref s (+ p 1)))
	     (s1 (+ (ash s1-1 32) s1-0))
	     (s0 (+ (ash s0-1 32) s0-0)))
	(declare (type (unsigned-byte 32) s1-0 s1-1))
	;; s1 ^= s1 << 31
	(format t "s1 = #x~16x~%" s1)
	(psetf s1-1 (logxor s1-1 (logior (ldb (byte 32 0) (ash s1-1 31))
					 (ldb (byte 31 1) s1-0)))
	       s1-0 (logxor s1-0 (ldb (byte 32 0) (ash s1-0 31))))
	(setf s1 (logxor s1 (ldb (byte 64 0) (ash s1 31))))
	(format t "s1 ^= s1 << 31: #x~16x~%" s1)
	(format t "s1-1,s1-0     = #x~8x~8x~%" s1-1 s1-0)
	;; s1 ^= s1 >> 11
	(psetf s1-1 (logxor s1-1 (ash s1-1 -11))
	       s1-0 (logxor s1-0 (logior (ash (ldb (byte 11 0) s1-1) (- 32 11))
					 (ash s1-0 -11))))
	(setf s1 (logxor s1 (ash s1 -11)))
	(format t "s1 ^= s1 >> 11: #x~16x~%" s1)
	(format t "s1-1,s1-0     = #x~8x~8x~%" s1-1 s1-0)
	;; s0 ^= s0 >> 30
	(format t "s0 = #x~16x~%" s0)
	(psetf s0-1 (logxor s0-1 (ash s0-1 -30))
	       s0-0 (logxor s0-0 (logior (ash (ldb (byte 30 0) s0-1) 2)
					 (ash s0-0 -30))))
	(setf s0 (logxor s0 (ash s0 -30)))
	(format t "s0 ^= s0 >> 30: #x~16x~%" s0)
	(format t "s0-1,s0-0:      #x~8x~8x~%" s0-1 s0-0)
	;; s[p] = s0 ^ s1
	(let ((new-0 (logxor s0-0 s1-0))
	      (new-1 (logxor s0-1 s1-1)))
	  (format t "s0^s1:  #x~16x~%" (logxor s0 s1))
	  (format t "parts:  #x~8x~8x~%" new-1 new-0)
	  (setf (aref s p) new-0)
	  (setf (aref s (+ p 1)) new-1)
	  (ldb (byte 64 0)
	       (* (logior (ash new-1 32) new-0)
		  1181783497276652981)))))))
